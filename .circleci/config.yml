version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.4
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  deploy:
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export EB_BUCKET="${AWS_RESOURCE_NAME_PREFIX}-deployments"' >> $BASH_ENV
            echo 'export STAGE="test"' >> $BASH_ENV
            echo 'export ENV="${AWS_RESOURCE_NAME_PREFIX}-$STAGE"' >> $BASH_ENV
            echo 'export VERSION="$STAGE-$(date +%s)"' >> $BASH_ENV
            echo 'export ZIP="$VERSION.zip"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME
      - run:
          name: Run script
          command: |
            zip -r $ZIP Dockerrun.aws.json .

            # Send zip to S3 Bucket
            aws s3 cp $ZIP s3://$EB_BUCKET/$ZIP

            # Create a new application version with the zipped up Dockerrun file
            aws elasticbeanstalk create-application-version --application-name $NAME --version-label $VERSION --source-bundle S3Bucket=$EB_BUCKET,S3Key=$ZIP

            # Update the environment to use the new application version
            aws elasticbeanstalk update-environment --environment-name $ENV --version-label $VERSION
workflows:
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build