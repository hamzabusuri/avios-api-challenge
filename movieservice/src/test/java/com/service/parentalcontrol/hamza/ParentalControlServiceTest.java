package com.service.parentalcontrol.hamza;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGenerated;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.service.parentalcontrol.hamza.config.DynamoDbConfig;
import com.service.parentalcontrol.hamza.exception.TechnicalFailureException;
import com.service.parentalcontrol.hamza.exception.TitleNotFoundException;
import com.service.parentalcontrol.hamza.impl.MovieServiceImpl;
import com.service.parentalcontrol.hamza.model.MovieClassification;
import com.service.parentalcontrol.hamza.repository.DynamoDbRepository;
import com.service.parentalcontrol.hamza.service.MovieService;
import com.service.parentalcontrol.hamza.impl.ParentalControlServiceImpl;
import com.service.parentalcontrol.hamza.service.ParentalControlService;
import org.junit.Test;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.MockitoJUnitRunner;
import static org.assertj.core.api.Assertions.assertThat;


import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.when;
import static org.mockito.ArgumentMatchers.anyString;
import org.junit.Before;
import org.springframework.beans.factory.annotation.Autowired;
import com.amazonaws.services.dynamodbv2.*;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import org.apache.catalina.core.ApplicationContext;
import org.socialsignin.spring.data.dynamodb.core.DynamoDBTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.test.context.TestPropertySource;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import java.util.List;
import org.junit.rules.ExpectedException;
import org.junit.Rule;
import static org.hamcrest.CoreMatchers.is;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.junit4.SpringRunner;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

@RunWith(MockitoJUnitRunner.class)
@SpringBootTest(classes = DynamoDbConfig.class)
public class ParentalControlServiceTest {

    @Spy
    private ParentalControlServiceImpl parentalControlService;

    @Spy
    private MovieService movieService;

    @Mock
    private DynamoDbRepository repository;

    @InjectMocks
    private DynamoDBMapper mapper;

    @Mock
    private DynamoDbConfig config;

    @Mock
    private AmazonDynamoDB amazonDynamoDB;
    @Test
    public void contextLoads() {
    }


    /*@Test(expected = TechnicalFailureException.class)
    public void isMoviePermissible_runtimeFailure_expectTechnicalFailureException() throws TechnicalFailureException, TitleNotFoundException {
        MovieClassification movie = MovieClassification.builder().movieId("1").identifier("U").build();
        when(parentalControlService.checkParentalControlLevel(movie.getMovieId(), "***")).thenThrow(TechnicalFailureException.class);
    }*/

    /*private void setMovieFromDBOutput(String classification) {
        when(mapper.load(MovieClassification.class,"12345"))
                .thenReturn(MovieClassification.builder()
                        .movieId("12345")
                        .identifier(classification)
                        .build());
    }*/

    public AmazonDynamoDB amazonDynamoDBConfig() {
        return AmazonDynamoDBClientBuilder.standard()
                .withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration("dynamodb.us-east-1.amazonaws.com", "us-east-1"))
                .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials("AKIAJ4JJ7PF26GZST4JA", "1ZsCzsQ1Q0PoHGsqGMA2PcYkhnUHTTEdvq3KnYHh")))
                .build();
    }


}